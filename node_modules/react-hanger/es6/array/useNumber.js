import { useCallback, useMemo, useState } from 'react';
export function useNumber(initial, { upperLimit, lowerLimit, loop, step = 1, } = {}) {
    const [value, setValue] = useState(initial);
    const decrease = useCallback((d) => {
        setValue(aValue => {
            const decreaseBy = d !== undefined ? d : step;
            const nextValue = aValue - decreaseBy;
            if (lowerLimit !== undefined) {
                if (nextValue + decreaseBy > lowerLimit) {
                    return nextValue;
                }
                if (loop && upperLimit) {
                    return upperLimit;
                }
                return aValue;
            }
            return nextValue;
        });
    }, [loop, lowerLimit, step, upperLimit]);
    const increase = useCallback((i) => {
        setValue(aValue => {
            const increaseBy = i !== undefined ? i : step;
            const nextValue = aValue + increaseBy;
            if (upperLimit !== undefined) {
                if (nextValue - increaseBy < upperLimit) {
                    return nextValue;
                }
                if (loop) {
                    return initial;
                }
                return aValue;
            }
            return nextValue;
        });
    }, [initial, loop, step, upperLimit]);
    const actions = useMemo(() => ({
        setValue,
        increase,
        decrease,
    }), [decrease, increase]);
    return [value, actions];
}
export default useNumber;
//# sourceMappingURL=useNumber.js.map
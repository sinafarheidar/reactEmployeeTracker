{"ast":null,"code":"import { useCallback, useMemo, useState } from 'react';\nexport function useArray(initial) {\n  const [value, setValue] = useState(initial);\n  const push = useCallback(a => {\n    setValue(v => [...v, ...(Array.isArray(a) ? a : [a])]);\n  }, []);\n  const unshift = useCallback(a => setValue(v => [...(Array.isArray(a) ? a : [a]), ...v]), []);\n  const pop = useCallback(() => setValue(v => v.slice(0, -1)), []);\n  const shift = useCallback(() => setValue(v => v.slice(1)), []);\n  const move = useCallback((from, to) => setValue(it => {\n    const copy = it.slice();\n    copy.splice(to < 0 ? copy.length + to : to, 0, copy.splice(from, 1)[0]);\n    return copy;\n  }), []);\n  const clear = useCallback(() => setValue(() => []), []);\n  const removeById = useCallback( // @ts-ignore not every array that you will pass down will have object with id field.\n  id => setValue(arr => arr.filter(v => v && v.id !== id)), []);\n  const removeIndex = useCallback(index => setValue(v => {\n    const copy = v.slice();\n    copy.splice(index, 1);\n    return copy;\n  }), []);\n  const actions = useMemo(() => ({\n    setValue,\n    add: push,\n    unshift,\n    push,\n    move,\n    clear,\n    removeById,\n    removeIndex,\n    pop,\n    shift\n  }), [push, unshift, move, clear, removeById, removeIndex, pop, shift]);\n  return [value, actions];\n}\nexport default useArray;","map":{"version":3,"sources":["../../../src/array/useArray.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,EAAsB,OAAtB,EAA+B,QAA/B,QAA+C,OAA/C;AAiBA,OAAM,SAAU,QAAV,CAA4B,OAA5B,EAAwC;AAC5C,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,IAAI,GAAG,WAAW,CAAC,CAAC,IAAG;AAC3B,IAAA,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAJ,EAAO,IAAI,KAAK,CAAC,OAAN,CAAc,CAAd,IAAmB,CAAnB,GAAuB,CAAC,CAAD,CAA3B,CAAP,CAAN,CAAR;AACD,GAFuB,EAErB,EAFqB,CAAxB;AAGA,QAAM,OAAO,GAAG,WAAW,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAN,CAAc,CAAd,IAAmB,CAAnB,GAAuB,CAAC,CAAD,CAA3B,CAAD,EAAkC,GAAG,CAArC,CAAN,CAAd,EAA8D,EAA9D,CAA3B;AACA,QAAM,GAAG,GAAG,WAAW,CAAC,MAAM,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAN,CAAf,EAAsC,EAAtC,CAAvB;AACA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAM,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAN,CAAf,EAAkC,EAAlC,CAAzB;AACA,QAAM,IAAI,GAAG,WAAW,CACtB,CAAC,IAAD,EAAe,EAAf,KACE,QAAQ,CAAC,EAAE,IAAG;AACZ,UAAM,IAAI,GAAG,EAAE,CAAC,KAAH,EAAb;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,EAAE,GAAG,CAAL,GAAS,IAAI,CAAC,MAAL,GAAc,EAAvB,GAA4B,EAAxC,EAA4C,CAA5C,EAA+C,IAAI,CAAC,MAAL,CAAY,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,CAA/C;AACA,WAAO,IAAP;AACD,GAJO,CAFY,EAOtB,EAPsB,CAAxB;AASA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAM,QAAQ,CAAC,MAAM,EAAP,CAAf,EAA2B,EAA3B,CAAzB;AACA,QAAM,UAAU,GAAG,WAAW,EAC5B;AACA,EAAA,EAAE,IAAI,QAAQ,CAAC,GAAG,IAAI,GAAG,CAAC,MAAJ,CAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAF,KAAS,EAA9B,CAAR,CAFc,EAG5B,EAH4B,CAA9B;AAKA,QAAM,WAAW,GAAG,WAAW,CAC7B,KAAK,IACH,QAAQ,CAAC,CAAC,IAAG;AACX,UAAM,IAAI,GAAG,CAAC,CAAC,KAAF,EAAb;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,KAAZ,EAAmB,CAAnB;AACA,WAAO,IAAP;AACD,GAJO,CAFmB,EAO7B,EAP6B,CAA/B;AASA,QAAM,OAAO,GAAG,OAAO,CACrB,OAAO;AACL,IAAA,QADK;AAEL,IAAA,GAAG,EAAE,IAFA;AAGL,IAAA,OAHK;AAIL,IAAA,IAJK;AAKL,IAAA,IALK;AAML,IAAA,KANK;AAOL,IAAA,UAPK;AAQL,IAAA,WARK;AASL,IAAA,GATK;AAUL,IAAA;AAVK,GAAP,CADqB,EAarB,CAAC,IAAD,EAAO,OAAP,EAAgB,IAAhB,EAAsB,KAAtB,EAA6B,UAA7B,EAAyC,WAAzC,EAAsD,GAAtD,EAA2D,KAA3D,CAbqB,CAAvB;AAeA,SAAO,CAAC,KAAD,EAAQ,OAAR,CAAP;AACD;AAED,eAAe,QAAf","sourceRoot":"","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nexport function useArray(initial) {\n    const [value, setValue] = useState(initial);\n    const push = useCallback(a => {\n        setValue(v => [...v, ...(Array.isArray(a) ? a : [a])]);\n    }, []);\n    const unshift = useCallback(a => setValue(v => [...(Array.isArray(a) ? a : [a]), ...v]), []);\n    const pop = useCallback(() => setValue(v => v.slice(0, -1)), []);\n    const shift = useCallback(() => setValue(v => v.slice(1)), []);\n    const move = useCallback((from, to) => setValue(it => {\n        const copy = it.slice();\n        copy.splice(to < 0 ? copy.length + to : to, 0, copy.splice(from, 1)[0]);\n        return copy;\n    }), []);\n    const clear = useCallback(() => setValue(() => []), []);\n    const removeById = useCallback(\n    // @ts-ignore not every array that you will pass down will have object with id field.\n    id => setValue(arr => arr.filter(v => v && v.id !== id)), []);\n    const removeIndex = useCallback(index => setValue(v => {\n        const copy = v.slice();\n        copy.splice(index, 1);\n        return copy;\n    }), []);\n    const actions = useMemo(() => ({\n        setValue,\n        add: push,\n        unshift,\n        push,\n        move,\n        clear,\n        removeById,\n        removeIndex,\n        pop,\n        shift,\n    }), [push, unshift, move, clear, removeById, removeIndex, pop, shift]);\n    return [value, actions];\n}\nexport default useArray;\n//# sourceMappingURL=useArray.js.map"]},"metadata":{},"sourceType":"module"}
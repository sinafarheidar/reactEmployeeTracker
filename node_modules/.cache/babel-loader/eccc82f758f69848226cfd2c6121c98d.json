{"ast":null,"code":"import { useCallback, useMemo, useState } from 'react';\nexport function useMap(initialState = new Map()) {\n  const [map, setMap] = useState(Array.isArray(initialState) ? new Map(initialState) : initialState);\n  const set = useCallback((key, value) => {\n    setMap(aMap => {\n      const copy = new Map(aMap);\n      return copy.set(key, value);\n    });\n  }, []);\n  const deleteByKey = useCallback(key => {\n    setMap(_map => {\n      const copy = new Map(_map);\n      copy.delete(key);\n      return copy;\n    });\n  }, []);\n  const clear = useCallback(() => {\n    setMap(() => new Map());\n  }, []);\n  const initialize = useCallback((mapOrTuple = []) => {\n    setMap(() => new Map(mapOrTuple));\n  }, []);\n  const actions = useMemo(() => ({\n    setValue: setMap,\n    clear,\n    set,\n    // TODO: To be removed in the next major release\n    remove: deleteByKey,\n    delete: deleteByKey,\n    initialize\n  }), [clear, deleteByKey, initialize, set]);\n  return [map, actions];\n}\nexport default useMap;","map":{"version":3,"sources":["../../../src/array/useMap.ts"],"names":[],"mappings":"AAAA,SAAmC,WAAnC,EAAgD,OAAhD,EAAyD,QAAzD,QAAyE,OAAzE;AAgBA,OAAM,SAAU,MAAV,CAAuB,YAAA,GAAmC,IAAI,GAAJ,EAA1D,EAAmE;AACvE,QAAM,CAAC,GAAD,EAAM,MAAN,IAAgB,QAAQ,CAAC,KAAK,CAAC,OAAN,CAAc,YAAd,IAA8B,IAAI,GAAJ,CAAQ,YAAR,CAA9B,GAAsD,YAAvD,CAA9B;AAEA,QAAM,GAAG,GAAG,WAAW,CAAC,CAAC,GAAD,EAAM,KAAN,KAAe;AACrC,IAAA,MAAM,CAAC,IAAI,IAAG;AACZ,YAAM,IAAI,GAAG,IAAI,GAAJ,CAAQ,IAAR,CAAb;AACA,aAAO,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,KAAd,CAAP;AACD,KAHK,CAAN;AAID,GALsB,EAKpB,EALoB,CAAvB;AAOA,QAAM,WAAW,GAAG,WAAW,CAAC,GAAG,IAAG;AACpC,IAAA,MAAM,CAAC,IAAI,IAAG;AACZ,YAAM,IAAI,GAAG,IAAI,GAAJ,CAAQ,IAAR,CAAb;AACA,MAAA,IAAI,CAAC,MAAL,CAAY,GAAZ;AACA,aAAO,IAAP;AACD,KAJK,CAAN;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAK;AAC7B,IAAA,MAAM,CAAC,MAAM,IAAI,GAAJ,EAAP,CAAN;AACD,GAFwB,EAEtB,EAFsB,CAAzB;AAIA,QAAM,UAAU,GAAG,WAAW,CAAC,CAAC,UAAA,GAAiC,EAAlC,KAAwC;AACrE,IAAA,MAAM,CAAC,MAAM,IAAI,GAAJ,CAAQ,UAAR,CAAP,CAAN;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAIA,QAAM,OAAO,GAAG,OAAO,CACrB,OAAO;AACL,IAAA,QAAQ,EAAE,MADL;AAEL,IAAA,KAFK;AAGL,IAAA,GAHK;AAIL;AACA,IAAA,MAAM,EAAE,WALH;AAML,IAAA,MAAM,EAAE,WANH;AAOL,IAAA;AAPK,GAAP,CADqB,EAUrB,CAAC,KAAD,EAAQ,WAAR,EAAqB,UAArB,EAAiC,GAAjC,CAVqB,CAAvB;AAaA,SAAO,CAAC,GAAD,EAAM,OAAN,CAAP;AACD;AAED,eAAe,MAAf","sourceRoot":"","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nexport function useMap(initialState = new Map()) {\n    const [map, setMap] = useState(Array.isArray(initialState) ? new Map(initialState) : initialState);\n    const set = useCallback((key, value) => {\n        setMap(aMap => {\n            const copy = new Map(aMap);\n            return copy.set(key, value);\n        });\n    }, []);\n    const deleteByKey = useCallback(key => {\n        setMap(_map => {\n            const copy = new Map(_map);\n            copy.delete(key);\n            return copy;\n        });\n    }, []);\n    const clear = useCallback(() => {\n        setMap(() => new Map());\n    }, []);\n    const initialize = useCallback((mapOrTuple = []) => {\n        setMap(() => new Map(mapOrTuple));\n    }, []);\n    const actions = useMemo(() => ({\n        setValue: setMap,\n        clear,\n        set,\n        // TODO: To be removed in the next major release\n        remove: deleteByKey,\n        delete: deleteByKey,\n        initialize,\n    }), [clear, deleteByKey, initialize, set]);\n    return [map, actions];\n}\nexport default useMap;\n//# sourceMappingURL=useMap.js.map"]},"metadata":{},"sourceType":"module"}